import * as cron from 'node-cron';
import { supabase } from './supabase';
import { notifyReminder24h, notifyReminder2h } from './notifications';

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
async function getTomorrowAppointments() {
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  const dateStr = tomorrow.toISOString().split('T')[0];

  const { data, error } = await supabase
    .from('appointments')
    .select(`
      *,
      students!inner(*)
    `)
    .eq('date', dateStr)
    .eq('status', 'confirmed');

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:', error);
    return [];
  }

  return data || [];
}

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
async function getAppointmentsIn2Hours() {
  const now = new Date();
  const in2Hours = new Date(now.getTime() + 2 * 60 * 60 * 1000);
  
  const dateStr = in2Hours.toISOString().split('T')[0];
  const timeStr = `${in2Hours.getHours().toString().padStart(2, '0')}:00`;

  const { data, error } = await supabase
    .from('appointments')
    .select(`
      *,
      students!inner(*)
    `)
    .eq('date', dateStr)
    .eq('time', timeStr)
    .eq('status', 'confirmed');

  if (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞:', error);
    return [];
  }

  return data || [];
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞
async function checkAndSend24hReminders() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞...');
  
  try {
    const appointments = await getTomorrowAppointments();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞: ${appointments.length}`);

    for (const apt of appointments) {
      try {
        const student = apt.students;
        if (!student) continue;

        await notifyReminder24h(apt, student);
        console.log(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${student.firstName} ${student.lastName}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è ${apt.id}:`, error);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ 24—á –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ 2 —á–∞—Å–∞
async function checkAndSend2hReminders() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ 2 —á–∞—Å–∞...');
  
  try {
    const appointments = await getAppointmentsIn2Hours();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞: ${appointments.length}`);

    for (const apt of appointments) {
      try {
        const student = apt.students;
        if (!student) continue;

        await notifyReminder2h(apt, student);
        console.log(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${student.firstName} ${student.lastName}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è ${apt.id}:`, error);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ 2—á –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
export function startScheduledTasks() {
  console.log('‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
  cron.schedule('0 */4 * * *', async () => {
    console.log('\nüïê –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
    await checkAndSend24hReminders();
    await checkAndSend2hReminders();
  });

  console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞');
}

