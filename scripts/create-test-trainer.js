#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';
import { readFileSync } from 'fs';
import { join } from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function createTestTrainer() {
  log('\nüèãÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞...', 'blue');
  
  try {
    // –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const envPath = join(__dirname, '..', '.env');
    const envContent = readFileSync(envPath, 'utf8');
    
    const supabaseUrl = envContent.match(/VITE_SUPABASE_URL=(.+)/)?.[1];
    const supabaseKey = envContent.match(/VITE_SUPABASE_ANON_KEY=(.+)/)?.[1];
    
    if (!supabaseUrl || !supabaseKey) {
      log('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'red');
      return;
    }
    
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç—Ä–µ–Ω–µ—Ä —Å ID 1
    const { data: existingTrainer, error: checkError } = await supabase
      .from('users')
      .select('*')
      .eq('id', 1)
      .single();
    
    if (existingTrainer && !checkError) {
      log('‚úÖ –¢—Ä–µ–Ω–µ—Ä —Å ID 1 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'green');
      log(`   Email: ${existingTrainer.email}`, 'blue');
      log(`   –ò–º—è: ${existingTrainer.first_name} ${existingTrainer.last_name}`, 'blue');
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
    const { data: trainer, error: trainerError } = await supabase
      .from('users')
      .insert({
        id: 1,
        email: 'trainer@fittrak.pro',
        password: 'hashed_password_here', // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—å –±—É–¥–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω
        first_name: '–ò–≤–∞–Ω',
        last_name: '–¢—Ä–µ–Ω–µ—Ä–æ–≤',
        middle_name: '–ü–µ—Ç—Ä–æ–≤–∏—á',
        phone: '+7 (999) 123-45-67',
        is_trainer: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()
      .single();
    
    if (trainerError) {
      log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞: ${trainerError.message}`, 'red');
      return;
    }
    
    log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–µ–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'green');
    log(`   ID: ${trainer.id}`, 'blue');
    log(`   Email: ${trainer.email}`, 'blue');
    log(`   –ò–º—è: ${trainer.first_name} ${trainer.last_name}`, 'blue');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
    const { data: student, error: studentError } = await supabase
      .from('students')
      .insert({
        trainer_id: 1,
        first_name: '–ê–Ω–Ω–∞',
        last_name: '–£—á–µ–Ω–∏–∫–æ–≤–∞',
        middle_name: '–°–µ—Ä–≥–µ–µ–≤–Ω–∞',
        phone: '+7 (999) 987-65-43',
        email: 'student@fittrak.pro',
        birth_date: '15.05.1995',
        join_date: new Date().toISOString().split('T')[0],
        status: 'active',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()
      .single();
    
    if (studentError) {
      log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞: ${studentError.message}`, 'yellow');
    } else {
      log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —É—á–µ–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'green');
      log(`   ID: ${student.id}`, 'blue');
      log(`   Email: ${student.email}`, 'blue');
      log(`   –ò–º—è: ${student.first_name} ${student.last_name}`, 'blue');
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    const { data: appointment, error: appointmentError } = await supabase
      .from('appointments')
      .insert({
        trainer_id: 1,
        pupil_id: student?.id || 1,
        date: new Date().toISOString().split('T')[0],
        time: '10:00',
        duration: 60,
        status: 'scheduled',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()
      .single();
    
    if (appointmentError) {
      log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: ${appointmentError.message}`, 'yellow');
    } else {
      log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–æ–∑–¥–∞–Ω–∞!', 'green');
      log(`   –î–∞—Ç–∞: ${appointment.date}`, 'blue');
      log(`   –í—Ä–µ–º—è: ${appointment.time}`, 'blue');
    }
    
    log('\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!', 'green');
    log('   –¢–µ–ø–µ—Ä—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫ 400.', 'blue');
    
  } catch (error) {
    log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
  }
}

createTestTrainer();

