#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';
import { readFileSync } from 'fs';
import { join } from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function checkEnvFile() {
  log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env...', 'blue');
  
  try {
    const envPath = join(__dirname, '..', '.env');
    const envContent = readFileSync(envPath, 'utf8');
    
    const supabaseUrl = envContent.match(/VITE_SUPABASE_URL=(.+)/)?.[1];
    const supabaseKey = envContent.match(/VITE_SUPABASE_ANON_KEY=(.+)/)?.[1];
    
    if (!supabaseUrl || !supabaseKey) {
      log('‚ùå –§–∞–π–ª .env –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', 'red');
      return { success: false, url: null, key: null };
    }
    
    log('‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', 'green');
    log(`   URL: ${supabaseUrl}`, 'blue');
    log(`   Key: ${supabaseKey.substring(0, 20)}...`, 'blue');
    
    return { success: true, url: supabaseUrl, key: supabaseKey };
  } catch (error) {
    log('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω', 'red');
    log('   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:', 'yellow');
    log('   VITE_SUPABASE_URL=https://your-project.supabase.co', 'yellow');
    log('   VITE_SUPABASE_ANON_KEY=your_anon_key', 'yellow');
    return { success: false, url: null, key: null };
  }
}

async function checkSupabaseConnection(url, key) {
  log('\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...', 'blue');
  
  try {
    const supabase = createClient(url, key);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    log('   –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...', 'blue');
    const { data: dbData, error: dbError } = await supabase
      .from('users')
      .select('count')
      .limit(1);
    
    if (dbError) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${dbError.message}`, 'red');
      return false;
    }
    
    log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ', 'green');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    log('   –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...', 'blue');
    const { data: authData, error: authError } = await supabase.auth.getSession();
    
    if (authError) {
      log(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${authError.message}`, 'red');
      return false;
    }
    
    log('‚úÖ –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'green');
    
    return true;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`, 'red');
    return false;
  }
}

async function checkDatabaseTables(url, key) {
  log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...', 'blue');
  
  try {
    const supabase = createClient(url, key);
    const tables = ['users', 'students', 'exercises', 'workout_programs', 'appointments'];
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1);
        
        if (error) {
          log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ '${table}': ${error.message}`, 'red');
        } else {
          log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ '${table}': OK`, 'green');
        }
      } catch (err) {
        log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ '${table}': ${err.message}`, 'red');
      }
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: ${error.message}`, 'red');
  }
}

async function main() {
  log(`${colors.bold}üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Supabase –¥–ª—è FitTrak-Pro${colors.reset}`, 'blue');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª .env
  const envCheck = checkEnvFile();
  if (!envCheck.success) {
    log('\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ Supabase.', 'red');
    process.exit(1);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  const connectionOk = await checkSupabaseConnection(envCheck.url, envCheck.key);
  if (!connectionOk) {
    log('\n‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase –Ω–µ —É–¥–∞–ª–æ—Å—å.', 'red');
    process.exit(1);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
  await checkDatabaseTables(envCheck.url, envCheck.key);
  
  log('\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! Supabase –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.', 'green');
  log('   –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.', 'blue');
}

main().catch(error => {
  log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
  process.exit(1);
});

