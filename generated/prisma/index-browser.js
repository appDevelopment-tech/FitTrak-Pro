
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  middleName: 'middleName',
  birthDate: 'birthDate',
  email: 'email',
  phone: 'phone',
  isTrainer: 'isTrainer',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PupilScalarFieldEnum = {
  id: 'id',
  trainerId: 'trainerId',
  firstName: 'firstName',
  lastName: 'lastName',
  middleName: 'middleName',
  phone: 'phone',
  email: 'email',
  password: 'password',
  birthDate: 'birthDate',
  weight: 'weight',
  height: 'height',
  goal: 'goal',
  medicalNotes: 'medicalNotes',
  photo: 'photo',
  status: 'status',
  joinDate: 'joinDate',
  parentFirstName: 'parentFirstName',
  parentLastName: 'parentLastName',
  parentMiddleName: 'parentMiddleName',
  parentPhone: 'parentPhone',
  parentEmail: 'parentEmail',
  parentSpecialInstructions: 'parentSpecialInstructions',
  isParentRepresentative: 'isParentRepresentative',
  privacyPolicyAccepted: 'privacyPolicyAccepted',
  privacyPolicyAcceptedDate: 'privacyPolicyAcceptedDate',
  contractAccepted: 'contractAccepted',
  contractAcceptedDate: 'contractAcceptedDate',
  educationConsentAccepted: 'educationConsentAccepted',
  educationConsentAcceptedDate: 'educationConsentAcceptedDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExerciseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  primaryMuscles: 'primaryMuscles',
  secondaryMuscles: 'secondaryMuscles',
  difficulty: 'difficulty',
  overview: 'overview',
  technique: 'technique',
  commonMistakes: 'commonMistakes',
  contraindications: 'contraindications',
  muscleImageUrl: 'muscleImageUrl',
  videoUrl: 'videoUrl',
  techniqueImageUrl: 'techniqueImageUrl',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkoutProgramScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  duration: 'duration',
  level: 'level',
  createdBy: 'createdBy',
  exercises: 'exercises',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkoutSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  programId: 'programId',
  scheduledDate: 'scheduledDate',
  startTime: 'startTime',
  endTime: 'endTime',
  status: 'status',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExerciseProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  exerciseId: 'exerciseId',
  weight: 'weight',
  reps: 'reps',
  sets: 'sets',
  date: 'date',
  sessionId: 'sessionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PupilTrainingPlanScalarFieldEnum = {
  id: 'id',
  pupilId: 'pupilId',
  trainerId: 'trainerId',
  name: 'name',
  exercises: 'exercises',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PupilWorkoutHistoryScalarFieldEnum = {
  id: 'id',
  pupilId: 'pupilId',
  trainerId: 'trainerId',
  workoutDate: 'workoutDate',
  workoutTime: 'workoutTime',
  duration: 'duration',
  exercises: 'exercises',
  notes: 'notes',
  pupilFeedback: 'pupilFeedback',
  status: 'status',
  confirmationStatus: 'confirmationStatus',
  confirmedAt: 'confirmedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ActiveWorkoutScalarFieldEnum = {
  id: 'id',
  trainerId: 'trainerId',
  pupilId: 'pupilId',
  workoutProgramId: 'workoutProgramId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  trainerId: 'trainerId',
  pupilId: 'pupilId',
  date: 'date',
  time: 'time',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MuscleGroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  displayOrder: 'displayOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Pupil: 'Pupil',
  Exercise: 'Exercise',
  WorkoutProgram: 'WorkoutProgram',
  WorkoutSession: 'WorkoutSession',
  ExerciseProgress: 'ExerciseProgress',
  PupilTrainingPlan: 'PupilTrainingPlan',
  PupilWorkoutHistory: 'PupilWorkoutHistory',
  ActiveWorkout: 'ActiveWorkout',
  Appointment: 'Appointment',
  MuscleGroup: 'MuscleGroup'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
