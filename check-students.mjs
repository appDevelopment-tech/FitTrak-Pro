import { PrismaClient } from './generated/prisma/index.js';

const prisma = new PrismaClient();

async function checkStudents() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤
    const trainers = await prisma.user.findMany({
      where: { isTrainer: true }
    });
    
    console.log('üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä—ã –≤ –±–∞–∑–µ:');
    if (trainers.length === 0) {
      console.log('  ‚ùå –¢—Ä–µ–Ω–µ—Ä–æ–≤ –Ω–µ—Ç!');
    } else {
      trainers.forEach(trainer => {
        console.log(`  - ${trainer.firstName} ${trainer.lastName}`);
        console.log(`    ID: ${trainer.id}`);
        console.log(`    Email: ${trainer.email}\n`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤
    const students = await prisma.pupil.findMany({
      select: {
        id: true,
        trainerId: true,
        firstName: true,
        lastName: true,
        email: true
      }
    });
    
    console.log(`\nüìö –£—á–µ–Ω–∏–∫–∏ –≤ –±–∞–∑–µ (–≤—Å–µ–≥–æ ${students.length}):`);
    
    if (students.length === 0) {
      console.log('  ‚ùå –£—á–µ–Ω–∏–∫–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ!');
    } else {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç—Ä–µ–Ω–µ—Ä—É
      const byTrainer = {};
      students.forEach(student => {
        const trainerId = student.trainerId || '–ë–ï–ó –¢–†–ï–ù–ï–†–ê';
        if (!byTrainer[trainerId]) {
          byTrainer[trainerId] = [];
        }
        byTrainer[trainerId].push(student);
      });
      
      Object.entries(byTrainer).forEach(([trainerId, pupils]) => {
        console.log(`\n  –¢—Ä–µ–Ω–µ—Ä ID: ${trainerId}`);
        pupils.forEach(pupil => {
          console.log(`    - ${pupil.firstName} ${pupil.lastName} (${pupil.email})`);
        });
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    const appointments = await prisma.appointment.findMany({
      select: {
        id: true,
        trainerId: true,
        pupilId: true,
        date: true,
        time: true
      }
    });
    
    console.log(`\n\nüìÖ –ó–∞–ø–∏—Å–µ–π –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${appointments.length}`);
    
    console.log('\n\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:');
    if (students.length > 0) {
      const mainTrainerId = Object.keys(byTrainer)[0];
      console.log(`–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç UUID –≤–µ–∑–¥–µ: ${mainTrainerId}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkStudents();


