import express from 'express';
import cors from 'cors';
import { PrismaClient } from './generated/prisma/index.js';

const app = express();
const port = 3001;

app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É UTF-8
app.use((req, res, next) => {
  res.setHeader('Content-Type', 'application/json; charset=utf-8');
  next();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Prisma
const prisma = new PrismaClient();

// API –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω–æ–π SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
app.post('/api/auth/register', async (req, res) => {
  try {
    const userData = req.body;
    
    console.log('üìù –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', userData);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await prisma.pupil.findUnique({
      where: { email: userData.email }
    });
    
    if (existingUser) {
      return res.status(400).json({ message: 'Email already registered' });
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const newUser = await prisma.pupil.create({
      data: {
        firstName: userData.firstName,
        lastName: userData.lastName,
        middleName: userData.middleName || '',
        phone: userData.phone,
        email: userData.email,
        password: userData.password,
        birthDate: userData.birthDate,
        status: 'pending',
        joinDate: new Date().toISOString().split('T')[0],
        
        // –ü–æ–ª—è –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        parentFirstName: userData.parentFirstName || '',
        parentLastName: userData.parentLastName || '',
        parentMiddleName: userData.parentMiddleName || '',
        parentPhone: userData.parentPhone || '',
        parentEmail: userData.parentEmail || '',
        isParentRepresentative: userData.isParentRepresentative || false,
        
        // –°–æ–≥–ª–∞—Å–∏—è
        privacyPolicyAccepted: userData.privacyPolicyAccepted,
        privacyPolicyAcceptedDate: userData.privacyPolicyAccepted ? new Date().toISOString().split('T')[0] : null,
        contractAccepted: userData.contractAccepted,
        contractAcceptedDate: userData.contractAccepted ? new Date().toISOString().split('T')[0] : null,
        educationConsentAccepted: userData.educationConsentAccepted,
        educationConsentAcceptedDate: userData.educationConsentAccepted ? new Date().toISOString().split('T')[0] : null,
      }
    });
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ SQLite –ë–î:', newUser);
    
    // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–æ–ª—å –≤ –æ—Ç–≤–µ—Ç–µ
    const { password: _, ...userWithoutPassword } = newUser;
    
    res.status(201).json({ 
      pupil: userWithoutPassword,
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.' 
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message });
  }
});

// API –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', { email });
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const user = await prisma.pupil.findUnique({
      where: { email: email }
    });
    
    if (!user) {
      return res.status(401).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ)
    if (user.password !== password) {
      return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
    }
    
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', user.firstName, user.lastName);
    
    // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–æ–ª—å –≤ –æ—Ç–≤–µ—Ç–µ
    const { password: _, ...userWithoutPassword } = user;
    
    res.json({ 
      pupil: userWithoutPassword,
      message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
app.get('/api/users', async (req, res) => {
  try {
    const users = await prisma.pupil.findMany({
      select: {
        id: true,
        firstName: true,
        lastName: true,
        email: true,
        phone: true,
        status: true,
        createdAt: true
      }
    });
    
    res.json({ users });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ trainerId (–¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç—Ä–µ–Ω–µ—Ä–∞)
app.get('/api/trainers/:trainerId/pupils', async (req, res) => {
  try {
    const { trainerId } = req.params;
    
    console.log(`üìã –ó–∞–ø—Ä–æ—Å —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞: ${trainerId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ (–ø–æ–∫–∞ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ç—Ä–µ–Ω–µ—Ä—É)
    // TODO: –í –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ trainerId –≤ —Ç–∞–±–ª–∏—Ü—É Pupil
    const pupils = await prisma.pupil.findMany({
      select: {
        id: true,
        firstName: true,
        lastName: true,
        middleName: true,
        email: true,
        phone: true,
        birthDate: true,
        status: true,
        joinDate: true,
        createdAt: true,
        updatedAt: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    });
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—á–µ–Ω–∏–∫–æ–≤: ${pupils.length}`);
    
    res.json(pupils);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤
app.post('/api/test-students', async (req, res) => {
  try {
    const testStudents = [
      {
        firstName: '–ò–≤–∞–Ω',
        lastName: '–ò–≤–∞–Ω–æ–≤',
        middleName: '–ò–≤–∞–Ω–æ–≤–∏—á',
        email: 'ivanov@mail.ru',
        phone: '+7 (999) 111-11-11',
        birthDate: '15.03.1995',
        status: 'active',
        joinDate: new Date().toISOString().split('T')[0],
        privacyPolicyAccepted: true,
        privacyPolicyAcceptedDate: new Date().toISOString().split('T')[0],
        contractAccepted: true,
        contractAcceptedDate: new Date().toISOString().split('T')[0],
        educationConsentAccepted: true,
        educationConsentAcceptedDate: new Date().toISOString().split('T')[0],
      },
      {
        firstName: '–°—Ç—É–¥–µ–Ω—Ç',
        lastName: '–°—Ç—É–¥–µ–Ω—Ç–æ–≤–∏—á',
        middleName: '1',
        email: 'student1@mail.ru',
        phone: '+7 (999) 222-22-22',
        birthDate: '20.05.1998',
        status: 'active',
        joinDate: new Date().toISOString().split('T')[0],
        privacyPolicyAccepted: true,
        privacyPolicyAcceptedDate: new Date().toISOString().split('T')[0],
        contractAccepted: true,
        contractAcceptedDate: new Date().toISOString().split('T')[0],
        educationConsentAccepted: true,
        educationConsentAcceptedDate: new Date().toISOString().split('T')[0],
      },
      {
        firstName: '–°—Ç—É–¥–µ–Ω—Ç',
        lastName: '–°—Ç—É–¥–µ–Ω—Ç–æ–≤–∏—á',
        middleName: '2',
        email: 'student2@mail.ru',
        phone: '+7 (999) 333-33-33',
        birthDate: '10.08.2000',
        status: 'pending',
        joinDate: new Date().toISOString().split('T')[0],
        privacyPolicyAccepted: true,
        privacyPolicyAcceptedDate: new Date().toISOString().split('T')[0],
        contractAccepted: true,
        contractAcceptedDate: new Date().toISOString().split('T')[0],
        educationConsentAccepted: true,
        educationConsentAcceptedDate: new Date().toISOString().split('T')[0],
      }
    ];

    const createdStudents = [];
    
    for (const studentData of testStudents) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π email
      const existingStudent = await prisma.pupil.findUnique({
        where: { email: studentData.email }
      });
      
      if (!existingStudent) {
        const newStudent = await prisma.pupil.create({
          data: studentData
        });
        createdStudents.push(newStudent);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —É—á–µ–Ω–∏–∫: ${studentData.firstName} ${studentData.lastName}`);
      } else {
        console.log(`‚ö†Ô∏è –£—á–µ–Ω–∏–∫ —Å email ${studentData.email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
    }
    
    res.json({ 
      message: `–°–æ–∑–¥–∞–Ω–æ ${createdStudents.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤`,
      students: createdStudents
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
app.delete('/api/pupils/:pupilId', async (req, res) => {
  try {
    const { pupilId } = req.params;
    
    console.log(`üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞: ${pupilId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—á–µ–Ω–∏–∫
    const existingPupil = await prisma.pupil.findUnique({
      where: { id: pupilId }
    });
    
    if (!existingPupil) {
      return res.status(404).json({ message: '–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –£–¥–∞–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞
    await prisma.pupil.delete({
      where: { id: pupilId }
    });
    
    console.log(`‚úÖ –£—á–µ–Ω–∏–∫ —É–¥–∞–ª–µ–Ω: ${existingPupil.firstName} ${existingPupil.lastName}`);
    
    res.json({ 
      message: '–£—á–µ–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
      deletedPupil: {
        id: existingPupil.id,
        name: `${existingPupil.lastName} ${existingPupil.firstName} ${existingPupil.middleName || ''}`.trim()
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö',
    database: 'SQLite (dev.db)',
    port: port
  });
});

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('\nüîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
  await prisma.$disconnect();
  process.exit(0);
});

app.listen(port, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`üìù API endpoints:`);
  console.log(`   POST /api/auth/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è`);
  console.log(`   POST /api/auth/login - –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É`);
  console.log(`   GET  /api/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  console.log(`   GET  /api/trainers/:trainerId/pupils - –£—á–µ–Ω–∏–∫–∏ —Ç—Ä–µ–Ω–µ—Ä–∞`);
  console.log(`   POST /api/test-students - –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤`);
  console.log(`   DELETE /api/pupils/:pupilId - –£–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞`);
  console.log(`   GET  /api/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã`);
  console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite (dev.db)`);
  console.log(`üåê URL: http://localhost:${port}`);
});
