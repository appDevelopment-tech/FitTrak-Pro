import React from 'react';

// –¢–∏–ø—ã –æ—à–∏–±–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞
export enum ClientErrorType {
  NETWORK_ERROR = 'NETWORK_ERROR',
  VALIDATION_ERROR = 'VALIDATION_ERROR',
  AUTHENTICATION_ERROR = 'AUTHENTICATION_ERROR',
  AUTHORIZATION_ERROR = 'AUTHORIZATION_ERROR',
  NOT_FOUND_ERROR = 'NOT_FOUND_ERROR',
  SERVER_ERROR = 'SERVER_ERROR',
  TIMEOUT_ERROR = 'TIMEOUT_ERROR',
  UNKNOWN_ERROR = 'UNKNOWN_ERROR'
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
export interface ClientError {
  type: ClientErrorType;
  message: string;
  code?: string;
  statusCode?: number;
  details?: any;
  timestamp: string;
  context?: {
    endpoint?: string;
    method?: string;
    userId?: string;
    requestId?: string;
  };
}

// –ö–ª–∞—Å—Å –æ—à–∏–±–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
export class ClientAppError extends Error {
  public readonly type: ClientErrorType;
  public readonly code?: string;
  public readonly statusCode?: number;
  public readonly details?: any;
  public readonly context?: ClientError['context'];

  constructor(
    message: string,
    type: ClientErrorType,
    code?: string,
    statusCode?: number,
    details?: any,
    context?: ClientError['context']
  ) {
    super(message);
    this.type = type;
    this.code = code;
    this.statusCode = statusCode;
    this.details = details;
    this.context = context;
    this.name = 'ClientAppError';
  }
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
export class ClientErrorHandler {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
  public static handleApiError(error: any): ClientAppError {
    const timestamp = new Date().toISOString();
    
    // –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞
    if (!error.response) {
      return new ClientAppError(
        '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.',
        ClientErrorType.NETWORK_ERROR,
        'NETWORK_ERROR',
        undefined,
        { originalError: error.message }
      );
    }

    const { status, data } = error.response;
    const context = {
      endpoint: error.config?.url,
      method: error.config?.method,
      requestId: error.response.headers?.['x-request-id']
    };

    // –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if (status === 400 && data?.type === 'VALIDATION_ERROR') {
      return new ClientAppError(
        data.message || '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
        ClientErrorType.VALIDATION_ERROR,
        data.type,
        status,
        data.context,
        context
      );
    }

    // –û—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if (status === 401) {
      return new ClientAppError(
        data?.message || '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
        ClientErrorType.AUTHENTICATION_ERROR,
        data?.type || 'AUTHENTICATION_ERROR',
        status,
        data,
        context
      );
    }

    // –û—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (status === 403) {
      return new ClientAppError(
        data?.message || '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞',
        ClientErrorType.AUTHORIZATION_ERROR,
        data?.type || 'AUTHORIZATION_ERROR',
        status,
        data,
        context
      );
    }

    // –û—à–∏–±–∫–∏ "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    if (status === 404) {
      return new ClientAppError(
        data?.message || '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        ClientErrorType.NOT_FOUND_ERROR,
        data?.type || 'NOT_FOUND_ERROR',
        status,
        data,
        context
      );
    }

    // –û—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    if (status >= 500) {
      return new ClientAppError(
        data?.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        ClientErrorType.SERVER_ERROR,
        data?.type || 'SERVER_ERROR',
        status,
        data,
        context
      );
    }

    // –¢–∞–π–º–∞—É—Ç
    if (error.code === 'ECONNABORTED') {
      return new ClientAppError(
        '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞',
        ClientErrorType.TIMEOUT_ERROR,
        'TIMEOUT_ERROR',
        undefined,
        { timeout: error.config?.timeout },
        context
      );
    }

    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
    return new ClientAppError(
      data?.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      ClientErrorType.UNKNOWN_ERROR,
      data?.type || 'UNKNOWN_ERROR',
      status,
      data,
      context
    );
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
  public static getUserMessage(error: ClientAppError): string {
    switch (error.type) {
      case ClientErrorType.NETWORK_ERROR:
        return '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
      
      case ClientErrorType.VALIDATION_ERROR:
        return error.message;
      
      case ClientErrorType.AUTHENTICATION_ERROR:
        return '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.';
      
      case ClientErrorType.AUTHORIZATION_ERROR:
        return '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.';
      
      case ClientErrorType.NOT_FOUND_ERROR:
        return '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.';
      
      case ClientErrorType.SERVER_ERROR:
        return '–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      
      case ClientErrorType.TIMEOUT_ERROR:
        return '–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
      
      default:
        return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π
  public static isCriticalError(error: ClientAppError): boolean {
    return [
      ClientErrorType.SERVER_ERROR,
      ClientErrorType.NETWORK_ERROR,
      ClientErrorType.TIMEOUT_ERROR
    ].includes(error.type);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
  public static shouldRetry(error: ClientAppError): boolean {
    return [
      ClientErrorType.NETWORK_ERROR,
      ClientErrorType.SERVER_ERROR,
      ClientErrorType.TIMEOUT_ERROR
    ].includes(error.type);
  }
}

// –•—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export function useErrorHandler() {
  const [errors, setErrors] = React.useState<ClientAppError[]>([]);
  const [isRetrying, setIsRetrying] = React.useState(false);

  const addError = (error: ClientAppError) => {
    setErrors(prev => [...prev, error]);
  };

  const removeError = (index: number) => {
    setErrors(prev => prev.filter((_, i) => i !== index));
  };

  const clearErrors = () => {
    setErrors([]);
  };

  const handleApiError = (error: any) => {
    const clientError = ClientErrorHandler.handleApiError(error);
    addError(clientError);
    return clientError;
  };

  const retryOperation = async (operation: () => Promise<any>, maxRetries: number = 3) => {
    setIsRetrying(true);
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        const result = await operation();
        setIsRetrying(false);
        return result;
      } catch (error) {
        const clientError = ClientErrorHandler.handleApiError(error);
        
        if (attempt === maxRetries || !ClientErrorHandler.shouldRetry(clientError)) {
          addError(clientError);
          setIsRetrying(false);
          throw clientError;
        }
        
        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
      }
    }
    
    setIsRetrying(false);
  };

  return {
    errors,
    isRetrying,
    addError,
    removeError,
    clearErrors,
    handleApiError,
    retryOperation
  };
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
export function logError(error: ClientAppError, context?: string) {
  if (process.env.NODE_ENV === 'development') {
    console.group(`üö® Client Error${context ? ` - ${context}` : ''}`);
    console.error('Message:', error.message);
    console.error('Type:', error.type);
    console.error('Code:', error.code);
    console.error('Status:', error.statusCode);
    console.error('Context:', error.context);
    console.error('Details:', error.details);
    console.groupEnd();
  }
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
export async function reportError(error: ClientAppError, userId?: string) {
  try {
    // –í production –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    // –Ω–∞–ø—Ä–∏–º–µ—Ä, Sentry, LogRocket, –∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π API
    console.log('Error reported:', {
      ...error,
      userId,
      userAgent: navigator.userAgent,
      url: window.location.href,
      timestamp: new Date().toISOString()
    });
  } catch (reportingError) {
    console.error('Failed to report error:', reportingError);
  }
}
