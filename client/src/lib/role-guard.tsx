import { ReactNode, useEffect } from 'react';
import { useLocation } from 'wouter';
import { useAuth } from './auth';

interface RoleGuardProps {
  children: ReactNode;
  allowedRoles: ('trainer' | 'pupil')[];
  fallbackPath?: string;
}

export function RoleGuard({ children, allowedRoles, fallbackPath = '/login' }: RoleGuardProps) {
  const [, setLocation] = useLocation();
  const { user, pupil, loading } = useAuth();
  const { userRole } = useRoleCheck();

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –≤ useEffect
  useEffect(() => {
    console.log('üîç RoleGuard useEffect:', {
      loading,
      user: user ? { id: user.id, email: user.email } : null,
      pupil: pupil ? { id: pupil.id, email: pupil.email } : null,
      userRole,
      allowedRoles,
      fallbackPath
    });

    if (loading) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (!user && !pupil) {
      console.log('‚ùå No user or pupil, redirecting to:', fallbackPath);
      setLocation(fallbackPath);
      return;
    }

    // –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!userRole && user) {
      console.log('‚è≥ User exists but role not determined, waiting...');
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ —Ä–æ–ª—å –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∂–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ
      const timer = setTimeout(() => {
        if (!userRole) {
          console.log('‚ùå Role still not determined after timeout, redirecting to:', fallbackPath);
          setLocation(fallbackPath);
        }
      }, 2000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ 2 —Å–µ–∫—É–Ω–¥
      
      return () => clearTimeout(timer);
    }

    if (!userRole) {
      console.log('‚ùå No userRole, redirecting to:', fallbackPath);
      setLocation(fallbackPath);
      return;
    }

    if (!allowedRoles.includes(userRole as 'trainer' | 'pupil')) {
      console.log('‚ùå User role not allowed:', userRole, 'allowed:', allowedRoles);
      // –†–µ–¥–∏—Ä–µ–∫—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
      if (userRole === 'trainer') {
        console.log('üîÑ Redirecting trainer to /cabinet');
        setLocation('/cabinet');
      } else {
        console.log('üîÑ Redirecting pupil to /dashboard');
        setLocation('/dashboard');
      }
    } else {
      console.log('‚úÖ User role allowed:', userRole);
    }
  }, [user, pupil, loading, userRole, allowedRoles, fallbackPath, setLocation]);

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-lg">–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞...</div>
      </div>
    );
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  if (!user && !pupil) {
    return null;
  }

  if (!userRole) {
    return null;
  }

  if (!allowedRoles.includes(userRole as 'trainer' | 'pupil')) {
    return null;
  }

  return <>{children}</>;
}

// –•—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
export function useRoleCheck() {
  const { user, pupil } = useAuth();
  
  const isTrainer = user && (user as any).user_metadata?.is_trainer;
  const isPupil = user && pupil !== null;
  
  console.log('üîç Role check:', {
    user: user ? { id: user.id, email: user.email } : null,
    user_metadata: user ? (user as any).user_metadata : null,
    pupil: pupil ? { id: pupil.id, email: pupil.email } : null,
    isTrainer,
    isPupil,
    userRole: isTrainer ? 'trainer' : (isPupil ? 'pupil' : null)
  });
  
  return {
    isTrainer,
    isPupil,
    userRole: isTrainer ? 'trainer' : (isPupil ? 'pupil' : null),
  };
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏
interface RoleBasedRenderProps {
  children: ReactNode;
  trainer?: ReactNode;
  pupil?: ReactNode;
  fallback?: ReactNode;
}

export function RoleBasedRender({ children, trainer, pupil, fallback }: RoleBasedRenderProps) {
  const { isTrainer, isPupil } = useRoleCheck();

  if (isTrainer && trainer) {
    return <>{trainer}</>;
  }

  if (isPupil && pupil) {
    return <>{pupil}</>;
  }

  if (fallback) {
    return <>{fallback}</>;
  }

  return <>{children}</>;
}
