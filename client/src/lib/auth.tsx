import { createContext, useContext, useEffect, useState } from 'react';
import { User, Session } from '@supabase/supabase-js';
import { supabase } from './supabase';

interface AuthContextType {
  user: User | null;
  pupil: any | null;
  loading: boolean;
  signIn: (email: string, password: string, userType?: 'trainer' | 'pupil') => Promise<void>;
  signUp: (email: string, password: string, userData: any) => Promise<void>;
  signOut: () => Promise<void>;
  resetPassword: (email: string) => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ Supabase
const isSupabaseConfigured = !!import.meta.env.VITE_SUPABASE_URL && !!import.meta.env.VITE_SUPABASE_ANON_KEY;

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [pupil, setPupil] = useState<any | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API
    const savedUser = localStorage.getItem('fitTrakUser');
    const savedPupil = localStorage.getItem('fitTrakPupil');
    const savedUserType = localStorage.getItem('fitTrakUserType');
    
    if (savedUser && savedUserType) {
      console.log('üîÑ Restoring user from localStorage:', JSON.parse(savedUser));
      setUser(JSON.parse(savedUser));
      setPupil(savedPupil ? JSON.parse(savedPupil) : null);
      setLoading(false);
      return;
    }

    if (!isSupabaseConfigured) {
      // –ï—Å–ª–∏ Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      setLoading(false);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    const getSession = async () => {
      try {
        const { data: { session }, error } = await supabase.auth.getSession();

        if (error) {
          console.error('Error getting session:', error);
          setLoading(false);
          return;
        }

        if (session?.user) {
          setUser(session.user);
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–µ–Ω–∏–∫–æ–º
          await checkPupilProfile(session.user);
        }
      } catch (error) {
        console.error('Error in getSession:', error);
      } finally {
        setLoading(false);
      }
    };

    getSession();

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event: string, session: any) => {
        console.log('Auth state changed:', event, session?.user?.email);

        if (event === 'SIGNED_IN' && session?.user) {
          setUser(session.user);
          await checkPupilProfile(session.user);
        } else if (event === 'SIGNED_OUT') {
          setUser(null);
          setPupil(null);
        }

        setLoading(false);
      }
    );

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const checkPupilProfile = async (user: User) => {
    if (!isSupabaseConfigured || !supabase) {
      return;
    }

    try {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ç—Ä–µ–Ω–µ—Ä, –Ω–µ –∏—â–µ–º –µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü–µ students
      if ((user as any).user_metadata?.is_trainer) {
        setPupil(null);
        return;
      }

      const { data, error } = await supabase
        .from('students')
        .select('*')
        .eq('email', user.email)
        .single();

      if (data && !error) {
        setPupil(data);
      } else {
        setPupil(null);
      }
    } catch (error) {
      console.error('Error checking pupil profile:', error);
      setPupil(null);
    }
  };

  const signIn = async (email: string, password: string, userType?: 'trainer' | 'pupil') => {
    console.log('signIn called with:', { email, password, userType, isSupabaseConfigured });

    if (!isSupabaseConfigured) {
      throw new Error('Supabase is not configured. Please add VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY to your .env file');
    }

    try {
      // –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –Ω–∞—à API (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç SQLite –±–∞–∑–µ)
      console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ API (SQLite)...');
      
      const response = await fetch('http://localhost:8080/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      if (response.ok) {
        // –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ –Ω–∞—à API
        const loginResult = await response.json();
        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ API:', loginResult.user?.firstName, loginResult.user?.lastName);
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const mockUser = {
          id: loginResult.user?.id || 'mock-id',
          email: email,
          user_metadata: {
            first_name: loginResult.user?.firstName,
            last_name: loginResult.user?.lastName,
            is_trainer: loginResult.user?.isTrainer || false,
          }
        };

        console.log('üîç Mock user created:', {
          id: mockUser.id,
          email: mockUser.email,
          is_trainer: mockUser.user_metadata.is_trainer,
          userType: loginResult.userType
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        localStorage.setItem('fitTrakUser', JSON.stringify(mockUser));
        localStorage.setItem('fitTrakPupil', JSON.stringify(loginResult.pupil || null));
        localStorage.setItem('fitTrakUserType', loginResult.userType);

        setUser(mockUser as any);
        setPupil(loginResult.pupil || null);
        return;
      } else {
        // API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º Supabase –∫–∞–∫ fallback
        console.log('‚ö†Ô∏è API –≤—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º Supabase...');
        
        const { data, error } = await supabase.auth.signInWithPassword({
          email,
          password,
        });

        if (error) {
          throw new Error(error.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
        }

        if (data.user) {
          setUser(data.user);
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞
          await checkPupilProfile(data.user);
        }
      }
    } catch (error: any) {
      throw new Error(error.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
    }
  };

  const signUp = async (email: string, password: string, userData: any) => {
    if (!isSupabaseConfigured) {
      throw new Error('Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ VITE_SUPABASE_URL –∏ VITE_SUPABASE_ANON_KEY –≤ —Ñ–∞–π–ª–µ .env');
    }

    try {
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
        const response = await fetch('http://localhost:8080/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          firstName: userData.firstName,
          lastName: userData.lastName,
          middleName: userData.middleName || '',
          birthDate: userData.birthDate,
          phone: userData.phone,
          email: email,
          password: password,
          
          // –ü–æ–ª—è –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π)
          parentFirstName: userData.parentFirstName || '',
          parentLastName: userData.parentLastName || '',
          parentMiddleName: userData.parentMiddleName || '',
          parentPhone: userData.parentPhone || '',
          parentEmail: userData.parentEmail || '',
          isParentRepresentative: userData.isParentRepresentative || false,

          // –°–æ–≥–ª–∞—Å–∏—è
          privacyPolicyAccepted: userData.privacyPolicyAccepted,
          contractAccepted: userData.contractAccepted,
          educationConsentAccepted: userData.educationConsentAccepted,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —É—á–µ–Ω–∏–∫–∞');
      }

      const result = await response.json();
      console.log('–ü—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞ —Å–æ–∑–¥–∞–Ω:', result.pupil);

      // –¢–µ–ø–µ—Ä—å –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase Auth (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      try {
        const { data, error } = await supabase.auth.signUp({
          email,
          password,
          options: {
            data: {
              first_name: userData.firstName,
              last_name: userData.lastName,
              middle_name: userData.middleName,
              phone: userData.phone,
            }
          }
        });

        if (error) {
          console.warn('Supabase Auth —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–æ –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω:', error.message);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        } else {
          console.log('Supabase Auth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', data.user);
        }
      } catch (supabaseError: any) {
        console.warn('–û—à–∏–±–∫–∞ Supabase Auth, –Ω–æ –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω:', supabaseError.message);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      }

    } catch (error: any) {
      throw new Error(error.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }
  };

  const signOut = async () => {
    // –û—á–∏—â–∞–µ–º localStorage
    localStorage.removeItem('fitTrakUser');
    localStorage.removeItem('fitTrakPupil');
    localStorage.removeItem('fitTrakUserType');
    
    if (!isSupabaseConfigured) {
      setUser(null);
      setPupil(null);
      return;
    }

    try {
      const { error } = await supabase.auth.signOut();
      if (error) {
        throw new Error(error.message);
      }

      setUser(null);
      setPupil(null);
    } catch (error: any) {
      throw new Error(error.message || '–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞');
    }
  };

  const resetPassword = async (email: string) => {
    if (!isSupabaseConfigured) {
      throw new Error('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase');
    }

    try {
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/reset-password`,
      });

      if (error) {
        throw new Error(error.message);
      }
    } catch (error: any) {
      throw new Error(error.message || '–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è');
    }
  };

  return (
    <AuthContext.Provider value={{ user, pupil, loading, signIn, signUp, signOut, resetPassword }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}
