import { useState } from 'react';

import { Button } from '@/components/ui/button';

import { Badge } from '@/components/ui/badge';

import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';

import { useAuth } from '@/lib/auth';

import { useToast } from '@/hooks/use-toast';

import { useMutation, useQueryClient } from '@tanstack/react-query';

import { appointmentsDb } from '@/lib/database';

import type { Appointment, Pupil } from '@shared/schema';

import { Calendar, UserPlus, UserMinus, Users, Check, Clock, Dumbbell, Trash2 } from 'lucide-react';



interface ScheduleSlotProps {

  time: string;

  date: string;

  appointments: Appointment[];

  pupils: Pupil[];

  currentPupil?: Pupil;

  isTrainer?: boolean;

  maxSlots?: number;

  onSlotClick?: (time: string) => void;

  onToggleStatus?: (appointmentId: string) => void;

  onDeleteAppointment?: (appointmentId: string) => void;

  onStartWorkout?: (pupilId: string) => void;

  isWorkoutActive?: (trainerId: string, pupilId: string) => boolean;

  trainerId?: string;

}



type SlotStatus = 'free' | 'available' | 'full' | 'user-booked';



interface SlotInfo {

  status: SlotStatus;

  count: number;

  maxSlots: number;

  userAppointment?: Appointment;

  allAppointments: Appointment[];

}



export function ScheduleSlot({

  time,

  date,

  appointments,

  pupils,

  currentPupil,

  isTrainer = false,

  maxSlots = 2,

  onSlotClick,

  onToggleStatus,

  onDeleteAppointment,

  onStartWorkout,

  isWorkoutActive,

  trainerId = "550e8400-e29b-41d4-a716-446655440000"

}: ScheduleSlotProps) {

  const { toast } = useToast();

  const queryClient = useQueryClient();

  const [showBookingDialog, setShowBookingDialog] = useState(false);



  // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã

  const slotAppointments = appointments.filter(apt => 

    apt.date === date && apt.time === time

  );



  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–∞

  const getSlotInfo = (): SlotInfo => {

    const count = slotAppointments.length;

    const userAppointment = currentPupil 

      ? slotAppointments.find(apt => apt.pupilId === currentPupil.id)

      : undefined;



    let status: SlotStatus;

    if (userAppointment) {

      status = 'user-booked';

    } else if (count >= maxSlots) {

      status = 'full';

    } else if (count > 0) {

      status = 'available';

    } else {

      status = 'free';

    }



    return {

      status,

      count,

      maxSlots,

      userAppointment,

      allAppointments: slotAppointments

    };

  };



  const slotInfo = getSlotInfo();



  // –ú—É—Ç–∞—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏

  const createAppointmentMutation = useMutation({

    mutationFn: async (pupilId: string) => {

      console.log("üìù –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è pupilId:", pupilId, "–Ω–∞", date, time);

      return await appointmentsDb.create({

        trainerId: trainerId,

        pupilId,

        date,

        time,

        status: 'pending'

      });

    },

    onSuccess: () => {

      queryClient.invalidateQueries({ queryKey: ['appointments'] });

      queryClient.invalidateQueries({ queryKey: ['appointments', trainerId] });

      toast({

        title: '–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞',

        description: '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞'

      });

      setShowBookingDialog(false);

    },

    onError: (error: any) => {

      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", error);

      toast({

        title: '–û—à–∏–±–∫–∞',

        description: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è',

        variant: 'destructive'

      });

    }

  });



  const deleteAppointmentMutation = useMutation({

    mutationFn: async (appointmentId: string) => {

      console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å:", appointmentId);

      return await appointmentsDb.delete(appointmentId);

    },

    onSuccess: () => {

      queryClient.invalidateQueries({ queryKey: ['appointments'] });

      queryClient.invalidateQueries({ queryKey: ['appointments', trainerId] });

      toast({

        title: '–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞',

        description: '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'

      });

    },

    onError: (error: any) => {

      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", error);

      toast({

        title: '–û—à–∏–±–∫–∞',

        description: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å',

        variant: 'destructive'

      });

    }

  });



  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π

  const handleSlotClick = () => {

    if (onSlotClick) {

      onSlotClick(time);

      return;

    }



    if (slotInfo.status === 'user-booked' && slotInfo.userAppointment) {

      // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å

      deleteAppointmentMutation.mutate(slotInfo.userAppointment.id);

    } else if (slotInfo.status === 'free' || slotInfo.status === 'available') {

      // –ó–∞–ø–∏—Å–∞—Ç—å—Å—è

      if (!currentPupil) {

        toast({

          title: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',

          description: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∑–∞–ø–∏—Å–∏',

          variant: 'destructive'

        });

        return;

      }

      createAppointmentMutation.mutate(currentPupil.id);

    }

  };



  const handleCancelBooking = () => {

    if (slotInfo.userAppointment) {

      console.log("üóëÔ∏è –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å:", slotInfo.userAppointment.id);

      deleteAppointmentMutation.mutate(slotInfo.userAppointment.id);

    }

  };



  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

  const getPupilData = (appointment: Appointment): Pupil | undefined => {

    return pupils.find(p => p.id === appointment.pupilId);

  };



  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏ –∏ –∏–∫–æ–Ω–∫–∏

  const getSlotStyles = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userStatus = slotInfo.userAppointment?.status;

    switch (slotInfo.status) {

      case 'free':

        return {

          bg: 'bg-green-50 hover:bg-green-100',

          border: 'border-green-200 hover:border-green-300',

          indicator: 'bg-green-500',

          text: 'text-green-700',

          icon: Calendar

        };

      case 'available':

        return {

          bg: 'bg-yellow-50 hover:bg-yellow-100',

          border: 'border-yellow-200 hover:border-yellow-300',

          indicator: 'bg-yellow-500',

          text: 'text-yellow-700',

          icon: UserPlus

        };

      case 'user-booked':
        // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å pending - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∂–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
        if (userStatus === 'pending') {
          return {
            bg: 'bg-yellow-50 hover:bg-yellow-100',
            border: 'border-yellow-300 hover:border-yellow-400',
            indicator: 'bg-yellow-500',
            text: 'text-yellow-700',
            icon: Clock
          };
        }
        // –ï—Å–ª–∏ confirmed - –æ–±—ã—á–Ω—ã–π —Å–∏–Ω–∏–π
        return {
          bg: 'bg-blue-50 hover:bg-blue-100',
          border: 'border-blue-200 hover:border-blue-300',
          indicator: 'bg-blue-500',
          text: 'text-blue-700',
          icon: Check
        };

      case 'full':

        return {

          bg: 'bg-gray-50',

          border: 'border-gray-200',

          indicator: 'bg-gray-400',

          text: 'text-gray-500',

          icon: Users

        };

      default:
        return {
          bg: 'bg-gray-50',
          border: 'border-gray-200',
          indicator: 'bg-gray-400',
          text: 'text-gray-500',
          icon: Users
        };
    }

  };



  const styles = getSlotStyles();

  const IconComponent = styles.icon;



  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏

  const getButtonText = () => {

    switch (slotInfo.status) {

      case 'free':

        return '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è';

      case 'available':

        return '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è';

      case 'user-booked':

        return '–û—Ç–º–µ–Ω–∏—Ç—å';

      case 'full':

        return '–ó–∞–ø–æ–ª–Ω–µ–Ω–æ';

    }

  };



  // –î–ª—è —É—á–µ–Ω–∏–∫–æ–≤: —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ—è –∑–∞–ø–∏—Å—å

  const isDisabled = slotInfo.status === 'full' && !slotInfo.userAppointment;



  return (

    <>

      <div

        className={`

          flex flex-col gap-2 p-3 rounded-lg transition-colors border cursor-pointer

          ${styles.bg} ${styles.border}

          ${isDisabled ? 'cursor-not-allowed opacity-60' : ''}

        `}

        onClick={onSlotClick ? (isDisabled ? undefined : () => onSlotClick(time)) : undefined}

      >

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º */}

        <div className="flex items-center justify-between">

          <div className={`text-sm font-medium ${styles.text}`}>

            {time}

          </div>

          <div className={`w-2 h-2 rounded-full ${styles.indicator}`} />

        </div>



        {/* –°—á–µ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–µ–π */}

        <div className="flex items-center justify-center">

          <Badge variant="outline" className={`text-xs ${styles.text}`}>

            {slotInfo.count}/{slotInfo.maxSlots}

          </Badge>

        </div>



        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å—è—Ö */}

        <div className="flex-1 flex flex-col justify-center min-h-0">

          {slotInfo.allAppointments.length > 0 ? (

            <div className="space-y-1">

              {isTrainer ? (

                // –¢—Ä–µ–Ω–µ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤

                slotInfo.allAppointments.map((appointment, index) => {

                  const pupil = getPupilData(appointment);

                  return (

                    <div key={appointment.id} className="text-xs truncate">

                      {pupil ? `${pupil.lastName} ${pupil.firstName.charAt(0)}.` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}

                    </div>

                  );

                })

              ) : (

                // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å

                <div className="text-xs text-center">
                  {slotInfo.status === 'user-booked' ? (
                    slotInfo.userAppointment?.status === 'pending' ? (
                      <div className="flex items-center justify-center gap-1 text-yellow-600">
                        <Clock className="w-3 h-3" />
                        <span>–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</span>
                      </div>
                    ) : (
                      <div className="flex items-center justify-center gap-1 text-green-600">
                        <Check className="w-3 h-3" />
                        <span>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</span>
                      </div>
                    )
                  ) : '–ï—Å—Ç—å –º–µ—Å—Ç–∞'}
                </div>

              )}

            </div>

          ) : (

            <div className="text-xs text-center text-gray-500">

              –°–≤–æ–±–æ–¥–Ω–æ

            </div>

          )}

        </div>



        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}

        <div className="flex justify-center gap-1">

          {isTrainer && slotInfo.allAppointments.length > 0 ? (

            // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞

            <>

              {onToggleStatus && slotInfo.allAppointments.map((appointment) => (

                <Button

                  key={`toggle-${appointment.id}`}

                  size="sm"

                  variant="ghost"

                  onClick={() => onToggleStatus(appointment.id)}

                  className="h-6 w-6 p-0"

                >

                  <div className={`w-4 h-4 rounded-full flex items-center justify-center ${

                    appointment.status === 'confirmed' 

                      ? 'border-2 border-green-500 bg-green-50' 

                      : ''

                  }`}>

                    {appointment.status === 'confirmed' ? 

                      <Check className="h-2.5 w-2.5 text-green-600" /> : 

                      <Clock className="h-2.5 w-2.5 text-gray-400" />

                    }

                  </div>

                </Button>

              ))}

              {onStartWorkout && slotInfo.allAppointments.map((appointment) => {

                const pupil = getPupilData(appointment);

                if (!pupil || !isWorkoutActive) return null;

                return isWorkoutActive(trainerId, pupil.id) ? (

                  <Button

                    key={`workout-${appointment.id}`}

                    size="sm"

                    variant="ghost"

                    onClick={() => onStartWorkout(pupil.id)}

                    className="h-6 w-6 p-0"

                  >

                    <Dumbbell className="h-3 w-3" />

                  </Button>

                ) : null;

              })}

              {onDeleteAppointment && slotInfo.allAppointments.map((appointment) => (

                <Button

                  key={`delete-${appointment.id}`}

                  size="sm"

                  variant="ghost"

                  onClick={() => onDeleteAppointment(appointment.id)}

                  className="h-6 w-6 p-0 text-red-500 hover:text-red-700"

                >

                  <Trash2 className="h-3 w-3" />

                </Button>

              ))}

            </>

          ) : (

            // –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            <Button

              size="sm"

              variant={slotInfo.status === 'user-booked' ? 'destructive' : 'default'}

              disabled={isDisabled}

              className="text-xs h-6 px-2"

              onClick={(e) => {

                e.stopPropagation();

                if (slotInfo.status === 'user-booked') {

                  handleCancelBooking();

                } else {

                  handleSlotClick();

                }

              }}

            >

              <IconComponent className="w-3 h-3 mr-1" />

              {getButtonText()}

            </Button>

          )}

        </div>

      </div>



      {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ */}

      <Dialog open={showBookingDialog} onOpenChange={setShowBookingDialog}>

        <DialogContent>

          <DialogHeader>

            <DialogTitle>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏</DialogTitle>

            <DialogDescription>

              –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É {date} –≤ {time}?

            </DialogDescription>

          </DialogHeader>

          <div className="flex justify-end gap-2">

            <Button variant="outline" onClick={() => setShowBookingDialog(false)}>

              –û—Ç–º–µ–Ω–∞

            </Button>

            <Button 

              onClick={() => {

                if (currentPupil) {

                  createAppointmentMutation.mutate(currentPupil.id);

                }

              }}

              disabled={createAppointmentMutation.isPending}

            >

              {createAppointmentMutation.isPending ? '–ó–∞–ø–∏—Å—å...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'}

            </Button>

          </div>

        </DialogContent>

      </Dialog>

    </>

  );

}