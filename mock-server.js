import express from 'express';
import cors from 'cors';

const app = express();
const port = 8080;

app.use(cors());
app.use(express.json());

// –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
let mockUsers = [
  {
    id: '1',
    firstName: '–ò–≤–∞–Ω',
    lastName: '–ò–≤–∞–Ω–æ–≤',
    email: 'ivanov@fittrak.pro',
    phone: '+7 (999) 123-45-67',
    birthDate: '15.05.1990',
    status: 'active'
  }
];

// API –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
app.post('/api/auth/register', (req, res) => {
  try {
    const userData = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = mockUsers.find(u => u.email === userData.email);
    if (existingUser) {
      return res.status(400).json({ message: 'Email already registered' });
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser = {
      id: (mockUsers.length + 1).toString(),
      firstName: userData.firstName,
      lastName: userData.lastName,
      email: userData.email,
      phone: userData.phone,
      birthDate: userData.birthDate,
      status: 'pending',
      ...userData
    };
    
    mockUsers.push(newUser);
    
    console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', newUser);
    
    res.status(201).json({ 
      pupil: newUser,
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!' 
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// API –¥–ª—è –≤—Ö–æ–¥–∞
app.post('/api/auth/login', (req, res) => {
  try {
    const { email, password } = req.body;
    
    const user = mockUsers.find(u => u.email === email);
    if (!user) {
      return res.status(401).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É:', user);
    
    res.json({ 
      pupil: user,
      message: '–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!' 
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
app.get('/api/users', (req, res) => {
  res.json({ users: mockUsers });
});

app.listen(port, () => {
  console.log(`üöÄ –ú–æ–∫-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`üìù API endpoints:`);
  console.log(`   POST /api/auth/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è`);
  console.log(`   POST /api/auth/login - –í—Ö–æ–¥`);
  console.log(`   GET  /api/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
});
